cmake_minimum_required (VERSION 3.14)

include(CheckPIESupported)

if (NOT WAMR_BUILD_PLATFORM STREQUAL "windows")
    project (unit_tests)
else()
    project (unit_tests C ASM)
endif()

################  runtime settings  ################
string (TOLOWER ${CMAKE_HOST_SYSTEM_NAME} WAMR_BUILD_PLATFORM)
if (APPLE)
    add_definitions(-DBH_PLATFORM_DARWIN)
endif ()

# Reset default linker flags
set (CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
set (CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")

# WAMR features switch

# Set WAMR_BUILD_TARGET, currently values supported:
# "X86_64", "AMD_64", "X86_32", "AARCH64[sub]", "ARM[sub]", "THUMB[sub]",
# "MIPS", "XTENSA", "RISCV64[sub]", "RISCV32[sub]"
if (NOT DEFINED WAMR_BUILD_TARGET)
    if (CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm64|aarch64)")
        set (WAMR_BUILD_TARGET "AARCH64")
    elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL "riscv64")
        set (WAMR_BUILD_TARGET "RISCV64")
    elseif (CMAKE_SIZEOF_VOID_P EQUAL 8)
        # Build as X86_64 by default in 64-bit platform
        set (WAMR_BUILD_TARGET "X86_64")
    elseif (CMAKE_SIZEOF_VOID_P EQUAL 4)
        # Build as X86_32 by default in 32-bit platform
        set (WAMR_BUILD_TARGET "X86_32")
    else ()
        message(SEND_ERROR "Unsupported build target platform!")
    endif ()
endif ()

if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE Release)
endif ()

# Focus just on testing the interpreter.
set(WAMR_BUILD_INTERP 1)
set (WAMR_BUILD_FAST_INTERP 0)
if (NOT DEFINED WAMR_BUILD_AOT)
    set(WAMR_BUILD_AOT 0)
endif ()
if (NOT DEFINED WAMR_BUILD_JIT)
    set(WAMR_BUILD_JIT 0)
endif ()
set(WAMR_BUILD_SIMD 1)
set(WAMR_BUILD_REF_TYPES 1)
set(WAMR_BUILD_LIBC_BUILTIN 1)
set(WAMR_BUILD_LIBC_WASI 1)
set(WAMR_BUILD_MULTI_MODULE 1)
if (NOT DEFINED WASM_ENABLE_MIGRATING_INTERP)
    set(WASM_ENABLE_MIGRATING_INTERP 1)
endif ()

# compiling and linking flags
if (NOT (CMAKE_C_COMPILER MATCHES ".*clang.*" OR CMAKE_C_COMPILER_ID MATCHES ".*Clang"))
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections")
endif ()
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Wformat -Wformat-security")
if (WAMR_BUILD_TARGET MATCHES "X86_.*" OR WAMR_BUILD_TARGET STREQUAL "AMD_64")
    if (NOT (CMAKE_C_COMPILER MATCHES ".*clang.*" OR CMAKE_C_COMPILER_ID MATCHES ".*Clang"))
        set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mindirect-branch-register")
    endif ()
endif ()

# build out vmlib
set(WAMR_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR}/../..)
include (${WAMR_ROOT_DIR}/build-scripts/runtime_lib.cmake)

add_library(vmlib STATIC ${WAMR_RUNTIME_LIB_SOURCE})

################  application related  ################
include(ExternalProject)

# .c -> .wasm
ExternalProject_Add(WASM_MODULE
        SOURCE_DIR         ${CMAKE_CURRENT_SOURCE_DIR}/wasm-apps
        BUILD_ALWAYS TRUE
        UPDATE_COMMAND     ""
        PATCH_COMMAND      ""
        CONFIGURE_COMMAND  ${CMAKE_COMMAND}
        -DWASI_SDK_PREFIX=${WASI_SDK_DIR}
        -DCMAKE_TOOLCHAIN_FILE=${WASI_TOOLCHAIN_FILE}
        -DCMAKE_SYSROOT=${WASI_SYS_ROOT}
        -S ${CMAKE_CURRENT_SOURCE_DIR}/wasm-apps
        BUILD_COMMAND      ${CMAKE_COMMAND} --build .
        INSTALL_COMMAND    ${CMAKE_COMMAND} -E copy
        ./counter.wasm ${CMAKE_BINARY_DIR}
)

include_directories(${CMAKE_CURRENT_LIST_DIR}/src)
include (${SHARED_DIR}/utils/uncommon/shared_uncommon.cmake)

add_executable (unit_tests src/main.c ${UNCOMMON_SHARED_SOURCE})

check_pie_supported()
set_target_properties (unit_tests PROPERTIES POSITION_INDEPENDENT_CODE ON)

# if (APPLE)
#     target_link_libraries (unit_tests vmlib -lm -ldl -lpthread)
# else ()
#     target_link_libraries (unit_tests vmlib -lm -ldl -lpthread -lrt)
# endif ()
target_link_libraries (unit_tests vmlib -lm -ldl -lpthread -lrt)
target_link_libraries (unit_tests cunit)